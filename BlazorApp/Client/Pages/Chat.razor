@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorApp.Client.Services
@using BlazorApp.Shared.Extensions
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject ITokenService TokenService
@implements IAsyncDisposable

<AuthorizeView>
    <Authorized>

        <PageTitle>Чат</PageTitle>

        <div class="ba-header">
            <h2>@context.User.Get().Username</h2>
            <button @onclick="Logout">Выйти из аккаунта</button>
        </div>
    
        <div class="form-group">
            <label>
                Сообщение:
                <input @bind="messageInput" size="50" />
            </label>
        </div>
        <button @onclick="Send" disabled="@(!IsConnected)">Отправить</button>

        <hr>

        @foreach (var notify in notifies)
        {
            <span>@notify <br /></span>          
        }

        @foreach (var message in messages)
        {
            <span>@message <br /></span>
        }

    </Authorized>
    <NotAuthorized>
 
        <Auth/>

    </NotAuthorized>
</AuthorizeView>


@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private List<string> notifies = new List<string>();
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        var jwt = await TokenService.GetToken();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri($"/chathub?jwt={jwt}"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string>("Notify", message =>
        {
            notifies.Add(message);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", messageInput);
        }
    }

    private async Task Logout()
    {
        await TokenService.RemoveToken();
        AuthenticationStateProvider.StateChanged();

        Navigation.NavigateTo("/auth");
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}